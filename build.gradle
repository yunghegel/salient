import org.codehaus.groovy.runtime.GStringImpl
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org" }
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
    classpath(ext.build,buildscript)
}


plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'com.asarkar.gradle.build-time-tracker' version "4.3.0"
}

apply from: "$gradleHome/dist.gradle"
apply from: "gradle/project.gradle"

sourceSets.each { sourceSet ->
    sourceSet.java.srcDirs = []
    sourceSet.kotlin.srcDirs = []
    sourceSet.resources.srcDirs = []
}

ext {
    GRADLE_USER_HOME = project.gradle.gradleUserHomeDir.path
    INCLUDE_DIR = file("include")
    packages = [:]
    core =  [project(":engine"),project(":editor"),project(":launcher")]
    libs = project(":libs").subprojects
    resourceDir = project(":editor").file("assets")

    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            lwjglNatives = "natives-linux"
            def osArch = System.getProperty("os.arch")
            if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
                lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
            } else if  (osArch.startsWith("ppc")) {
                lwjglNatives += "-ppc64le"
            } else if  (osArch.startsWith("riscv")) {
                lwjglNatives += "-riscv64"
            }
            break
        case OperatingSystem.MAC_OS:
            lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
    }

    project(":libs").subprojects.each { project ->
        packages[project.name] = ":libs:${project.name}"
    }

}

allprojects {
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: "com.diffplug.spotless"


    group = "$groupId"
    project.version = "$salientVersion"

    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
        testlogger {
            theme 'mocha' // project level
            slowThreshold 5000
            showExceptions true
            showStackTraces true
            showFullStackTraces false
            showCauses true
            slowThreshold 2000
            showSummary true
            showSimpleNames true
            showPassed true
            showSkipped true
            showFailed true
            showStandardStreams false
            showPassedStandardStreams true
            showSkippedStandardStreams true
            showFailedStandardStreams true
            logLevel 'lifecycle'
        }
        useJUnitPlatform()
    }

    spotless {
        kotlin {
            // by default the target is every '.kt' and '.kts` file in the java sourcesets
            ktfmt()    // has its own section below
            ktlint()   // has its own section below
            diktat()   // has its own section below
            prettier() // has its own section below
            licenseHeader '/* (C)$YEAR */' // or licenseHeaderFile
        }
        kotlinGradle {
            target '*.gradle.kts' // default target for kotlinGradle
            ktlint() // or ktfmt() or prettier()
        }
        java {
            target 'src/**/*.java', 'test/**/*.java', 'generator/**/*.java'
            removeUnusedImports()
        }
        groovyGradle {
            target '*.gradle'
        }
    }

    spotlessApply {
        java
        kotlin
        gradle

    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'distribution'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'

    apply from : rootDir.path + "/gradle/dependencies.gradle"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        compileJava {
            options.release = 11
            options.fork = true
            options.incremental = true
            options.encoding = 'UTF-8'
        }
        withSourcesJar()


    }

    dependencies {
        api fileTree(dir: rootProject.file("include"), include: ['*.jar'])
    }

    sourceSets.configure {
        main.java.srcDirs += ['src']
        main.kotlin.srcDirs += ['src']
        main.resources.srcDirs += ["$resourceDir"]
        test.java.srcDirs += [ 'test' ]
        test.kotlin.srcDirs += [ 'test']
        test.resources.srcDirs += [ "$resourceDir" ]
    }

    kotlin {
        jvmToolchain(11)
        compilerOptions {
            freeCompilerArgs = ['-Xcontext-receivers', '-java-parameters']
        }
    }
}

def launcher = project(':launcher')
def releaseDir = project.file("release")

jar {
    subprojects.each { project ->
        dependsOn project.jar
    }

    doFirst {
       releaseDir.mkdirs()
    }

    group "salient"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': "org.yunghegel.salient.launcher.DesktopLauncher"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }


}


task dist(type: Copy) {
    group "salient"
    from launcher.jar
    into project.file("release")
    from sourceSets.main.resources
    into project.file("release")

        def executable = new File(project.file("release"), "salient")
        executable.createNewFile()
        executable.text = "#!/bin/bash\njava -jar salient-${version}.jar \$@"
        executable.setExecutable(true)


    doLast {
        releaseDir.listFiles().each { file ->
            file.setExecutable(true)
        }
    }


}

configure(launcher) {
    task run(type: JavaExec) {



        dependsOn classes
        group "salient"
        main(mainClassName)
        classpath sourceSets.main.runtimeClasspath
        standardInput = System.in
        workingDir = resourceDir
        ignoreExitValue = true
        if (System.properties['os.name'].toLowerCase().contains('mac')) {
            jvmArgs "-XstartOnFirstThread"
            jvmArgs "-Djava.awt.headless=true"
        }
    }
}











