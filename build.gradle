import org.codehaus.groovy.runtime.GStringImpl
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org" }
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
    classpath(ext.build,buildscript)
}


plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
}

apply from: "$gradleHome/tests.gradle"
apply from: "$gradleHome/dist.gradle"
apply from: "gradle/project.gradle"

sourceSets.each { sourceSet ->
    sourceSet.java.srcDirs = []
    sourceSet.kotlin.srcDirs = []
    sourceSet.resources.srcDirs = []
}

ext {
    GRADLE_USER_HOME = project.gradle.gradleUserHomeDir.path
    packages = [:]
    core =  [project(":engine"),project(":editor"),project(":launcher")]
    libs = project(":libs").subprojects
    resourceDir = project(":editor").file("assets")

    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            lwjglNatives = "natives-linux"
            def osArch = System.getProperty("os.arch")
            if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
                lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
            } else if  (osArch.startsWith("ppc")) {
                lwjglNatives += "-ppc64le"
            } else if  (osArch.startsWith("riscv")) {
                lwjglNatives += "-riscv64"
            }
            break
        case OperatingSystem.MAC_OS:
            lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
    }

    project(":libs").subprojects.each { project ->
        packages[project.name] = ":libs:${project.name}"
    }

}

allprojects {

    group = "$groupId"
    project.version = "$salientVersion"
    apply plugin: "com.diffplug.spotless"

    tasks.withType(Jar).configureEach {
        archiveFileName = "${rootProject.name}-$project.name.${project.version.toString()}.jar"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(KotlinCompile).configureEach {
        configure(kotlinOptions) {
            freeCompilerArgs += ['-Xcontext-receivers']
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        dependencies {
            implementation fileTree(dir: 'extern', include: ['*.jar'])
        }
    }
    spotless {
        kotlin {
            // by default the target is every '.kt' and '.kts` file in the java sourcesets
            ktfmt()    // has its own section below
            ktlint()   // has its own section below
            diktat()   // has its own section below
            prettier() // has its own section below
            licenseHeader '/* (C)$YEAR */' // or licenseHeaderFile
        }
        kotlinGradle {
            target '*.gradle.kts' // default target for kotlinGradle
            ktlint() // or ktfmt() or prettier()
        }
        java {
            target 'src/**/*.java', 'test/**/*.java', 'generator/**/*.java'
            removeUnusedImports()
        }
        groovyGradle {
            target '*.gradle'
        }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'distribution'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'

    apply from : rootDir.path + "/gradle/dependencies.gradle"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        compileJava {
            options.release = 11
            options.fork = true
            options.incremental = true
        }
        withSourcesJar()
    }

//    dependencies {
//        api fileTree(dir: 'ext', include: ['*.jar'])
//    }

    sourceSets.configure {
        main.java.srcDirs += ['src']
        main.kotlin.srcDirs += ['src']
        main.resources.srcDirs += ["$resourceDir"]
        test.java.srcDirs += [ 'test' ]
        test.kotlin.srcDirs += [ 'test']
        test.resources.srcDirs += [ "$resourceDir" ]
    }

    kotlin {
        jvmToolchain(11)
    }
}









