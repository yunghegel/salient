
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org" }
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
    classpath(ext.build,buildscript)
}


plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
}

apply from: "$gradleHome/dist.gradle"
apply from: "gradle/project.gradle"
apply from: "gradle/utils.gradle"



ext {
    GRADLE_USER_HOME = project.gradle.gradleUserHomeDir.path
    INCLUDE_DIR = file("include")
    packages = [:]
    core =  [project(":engine"),project(":editor"),project(":launcher")]
    libs = project(":libs").subprojects
    resourceDir = project(":editor").file("assets")
    releaseDir = project.file("release")
    os = OperatingSystem.current()
    switch (os) {
        case OperatingSystem.LINUX:
            lwjglNatives = "natives-linux"
            def osArch = System.getProperty("os.arch")
            if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
                lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
            } else if  (osArch.startsWith("ppc")) {
                lwjglNatives += "-ppc64le"
            } else if  (osArch.startsWith("riscv")) {
                lwjglNatives += "-riscv64"
            }
            break
        case OperatingSystem.MAC_OS:
            lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
    }

    project(":libs").subprojects.each { project ->
        packages[project.name] = ":libs:${project.name}"
    }

    launchTests = gradle.startParameter.projectProperties.get('test') != null

}

allprojects {
    group = "$groupId"
    project.version = "$salientVersion"
    test {
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
        }
        useJUnitPlatform()
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'distribution'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'

    apply from : rootDir.path + "/gradle/dependencies.gradle"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        compileJava {
            options.release = 11
            options.fork = true
            options.incremental = true
            options.encoding = 'UTF-8'
        }
        withSourcesJar()
    }

    sourceSets {
        main {
            resources {
                srcDirs = [resourceDir]
            }
            java {
                srcDirs = ['src']
            }
            kotlin {
                srcDirs = ['src']
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
            kotlin {
                srcDirs = ['test']
            }
        }
    }
    kotlin {
        jvmToolchain(11)
        compilerOptions {
            freeCompilerArgs = ['-Xcontext-receivers', '-java-parameters']
        }
    }
}


jar {
    doFirst {
       ext.releaseDir.mkdirs()
    }
    group "salient"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': "org.yunghegel.salient.launcher.exe.DesktopLauncher"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

configure(testing) {
//    only build if instruicted

    if (launchTests) {
        tasks.withType(Test) {
            useJUnitPlatform()
        }
        
    }
    dependencies {
        packages.each { pkg->
            implementation project("$pkg.value")
        }
    }



}


task dist(type: Copy) {

    def releaseDir = project.file("release")
    doFirst {
        if (releaseDir.exists()) {
            releaseDir.eachFile { file ->
                if (file.absolutePath.endsWith(".jar")) {
                    file.delete()
                }
            }
        }

    }
    releaseDir.mkdirs()
    group "salient"
    from launcher.jar
    into project.file("release")
    from sourceSets.main.resources
    into project.file("release")


        switch (OperatingSystem.current()) {
            case OperatingSystem.LINUX:
                def executable = new File(project.file("release"), "salient")
                executable.createNewFile()
                executable.text = "#!/bin/bash\njava -jar salient-${version}.jar \$@"
                executable.setExecutable(true)
                break
            case OperatingSystem.MAC_OS:
                def executable = new File(project.file("release"), "salient")
                executable.createNewFile()
                executable.text = "#!/bin/bash\njava -jar salient-${version}.jar \$@"
                executable.setExecutable(true)
                break
            case OperatingSystem.WINDOWS:
                def executable = new File(project.file("release"), "salient.bat")
                executable.createNewFile()
                executable.text = "@echo off\njava -jar salient-${version}.jar %*"
                break
        }
        releaseDir.listFiles().each { file ->
            file.setExecutable(true)
        }




}


configure(launcher) {
    if (launchTests) {
        dependencies {
            testImplementation project(":tests")
        }
    }


    task run(type: JavaExec) {
        dependsOn classes
        group "salient"
        main(launchTests ? "org.yunghegel.salient.tests.MainKt" : "org.yunghegel.salient.launcher.exe.DesktopLauncher")
        classpath sourceSets.main.runtimeClasspath
        standardInput = System.in
        workingDir = resourceDir
        ignoreExitValue = true
        if (System.properties['os.name'].toLowerCase().contains('mac')) {
            jvmArgs "-XstartOnFirstThread"
            jvmArgs "-Djava.awt.headless=true"
        }
    }
}

void makeExecutable() {
    switch (os) {
        case OperatingSystem.LINUX:
            def executable = new File(project.file("release"), "salient")
            executable.createNewFile()
            executable.text = "#!/bin/bash\njava -jar salient-${version}.jar \$@"
            executable.setExecutable(true)
            break
        case OperatingSystem.MAC_OS:
            def executable = new File(project.file("release"), "salient")
            executable.createNewFile()
            executable.text = "#!/bin/bash\njava -jar salient-${version}.jar \$@"
            executable.setExecutable(true)
            break
        case OperatingSystem.WINDOWS:
            def executable = new File(project.file("release"), "salient.bat")
            executable.createNewFile()
            executable.text = "@echo off\njava -jar salient-${version}.jar %*"
            break
    }
}



















