apply plugin:'edu.sc.seis.launch4j'
allprojects {
    mainClassName = mainClassName
}


dependencies {
    implementation project(":editor")
}

sourceSets {
    main {
        resources {
            srcDirs = ['assets']
        }
    }

}

jar {

    packages.each { pkg ->
        dependsOn project("$pkg.value").jar
    }
    dependsOn project(":editor").jar
    dependsOn project(":engine").jar

    archiveFileName = "salient-${version}.jar"

    manifest {
        attributes 'Main-Class': "org.yunghegel.salient.launcher.DesktopLauncher"
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    doLast {
//        jar executable
    }
}

//application {
//    group "salient"
//    mainClass = "org.yunghegel.salient.launcher.DesktopLauncher"
//}

def releaseDir =  "${rootDir}/release"

task release(type: Copy) {

    group "salient"

    from jar
    into releaseDir

    from sourceSets.main.resources
    into releaseDir

    from createAllExecutables
    into releaseDir

    doLast {
        create_launch_script
    }
}

//task create_launch_script(type: Copy) {
//
//    group "salient"
//    def script_text = """
//        @echo off
//        java -jar salient-${version}.jar
//    """
//    def script = file("$releaseDir"+"/"+"$artifactId" +".bat")
//
//
//    def writer = script.newPrintWriter()
//    writer.write(script_text)
//    writer.flush()
//
//    from script
//    into releaseDir
//}

launch4j {
    mainClassName = "$mainClassName"
    jarTask = jar
    icon = "$resourceDir/icon.png"
    outfile = "${artifactId}.exe"
}

distributions {
    main {
        contents {
            from createExe
            into new File("release")
        }
    }
}